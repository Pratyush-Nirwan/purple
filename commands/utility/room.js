const { MessageButton, MessageActionRow, MessageSelectMenu, ButtonInteraction, Message } = require("discord.js")
const emojis = [
    'üòÑ', 'üòÉ', 'üòÄ', 'üòä', '‚ò∫', 'üòâ', 'üòç', 'üòò', 'üòö', 'üòó', 'üòô', 'üòú', 'üòù', 'üòõ', 'üò≥', 'üòÅ', 'üòî', 'üòå', 'üòí', 'üòû', 'üò£', 'üò¢', 'üòÇ', 'üò≠', 'üò™', 'üò•', 'üò∞', 'üòÖ', 'üòì', 'üò©', 'üò´', 'üò®', 'üò±', 'üò†', 'üò°', 'üò§', 'üòñ', 'üòÜ', 'üòã', 'üò∑', 'üòé', 'üò¥', 'üòµ', 'üò≤', 'üòü', 'üò¶', 'üòß', 'üòà', 'üëø', 'üòÆ', 'üò¨', 'üòê', 'üòï', 'üòØ', 'üò∂', 'üòá', 'üòè', 'üòë', 'üë≤', 'üë≥', 'üëÆ', 'üë∑', 'üíÇ', 'üë∂', 'üë¶', 'üëß', 'üë®', 'üë©', 'üë¥', 'üëµ', 'üë±', 'üëº', 'üë∏', 'üò∫', 'üò∏', 'üòª', 'üòΩ', 'üòº', 'üôÄ', 'üòø', 'üòπ', 'üòæ', 'üëπ', 'üë∫', 'üôà', 'üôâ', 'üôä', 'üíÄ', 'üëΩ', 'üí©', 'üî•', '‚ú®', 'üåü', 'üí´', 'üí•', 'üí¢', 'üí¶', 'üíß', 'üí§', 'üí®', 'üëÇ', 'üëÄ', 'üëÉ', 'üëÖ', 'üëÑ', 'üëç', 'üëé', 'üëå', 'üëä', '‚úä', '‚úå', 'üëã', '‚úã', 'üëê', 'üëÜ', 'üëá', 'üëâ', 'üëà', 'üôå', 'üôè', '‚òù', 'üëè', 'üí™', 'üö∂', 'üèÉ', 'üíÉ', 'üë´', 'üë™', 'üë¨', 'üë≠', 'üíè', 'üíë', 'üëØ', 'üôÜ', 'üôÖ', 'üíÅ', 'üôã', 'üíÜ', 'üíá', 'üíÖ', 'üë∞', 'üôé', 'üôç', 'üôá', 'üé©', 'üëë', 'üëí', 'üëü', 'üëû', 'üë°', 'üë†', 'üë¢', 'üëï', 'üëî', 'üëö', 'üëó', 'üéΩ', 'üëñ', 'üëò', 'üëô', 'üíº', 'üëú', 'üëù', 'üëõ', 'üëì', 'üéÄ', 'üåÇ', 'üíÑ', 'üíõ', 'üíô', 'üíú', 'üíö', '‚ù§', 'üíî', 'üíó', 'üíì', 'üíï', 'üíñ', 'üíû', 'üíò', 'üíå', 'üíã', 'üíç', 'üíé', 'üë§', 'üë•', 'üí¨', 'üë£', 'üí≠', 'üê∂', 'üê∫', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'üê∏', 'üêØ', 'üê®', 'üêª', 'üê∑', 'üêΩ', 'üêÆ', 'üêó', 'üêµ', 'üêí', 'üê¥', 'üêë', 'üêò', 'üêº', 'üêß', 'üê¶', 'üê§', 'üê•', 'üê£', 'üêî', 'üêç', 'üê¢', 'üêõ', 'üêù', 'üêú', 'üêû', 'üêå', 'üêô', 'üêö', 'üê†', 'üêü', 'üê¨', 'üê≥', 'üêã', 'üêÑ', 'üêè', 'üêÄ', 'üêÉ', 'üêÖ', 'üêá', 'üêâ', 'üêé', 'üêê', 'üêì', 'üêï', 'üêñ', 'üêÅ', 'üêÇ', 'üê≤', 'üê°', 'üêä', 'üê´', 'üê™', 'üêÜ', 'üêà', 'üê©', 'üêæ', 'üíê', 'üå∏', 'üå∑', 'üçÄ', 'üåπ', 'üåª', 'üå∫', 'üçÅ', 'üçÉ', 'üçÇ', 'üåø', 'üåæ', 'üçÑ', 'üåµ', 'üå¥', 'üå≤', 'üå≥', 'üå∞', 'üå±', 'üåº', 'üåê', 'üåû', 'üåù', 'üåö', 'üåë', 'üåí', 'üåì', 'üåî', 'üåï', 'üåñ', 'üåó', 'üåò', 'üåú', 'üåõ', 'üåô', 'üåç', 'üåé', 'üåè', 'üåã', 'üåå', 'üå†', '‚≠ê', '‚òÄ', '‚õÖ', '‚òÅ', '‚ö°', '‚òî', '‚ùÑ', '‚õÑ', 'üåÄ', 'üåÅ', 'üåà', 'üåä', 'üéç', 'üíù', 'üéé', 'üéí', 'üéì', 'üéè', 'üéÜ', 'üéá', 'üéê', 'üéë', 'üéÉ', 'üëª', 'üéÖ', 'üéÑ', 'üéÅ', 'üéã', 'üéâ', 'üéä', 'üéà', 'üéå', 'üîÆ', 'üé•', 'üì∑', 'üìπ', 'üìº', 'üíø', 'üìÄ', 'üíΩ', 'üíæ', 'üíª', 'üì±', '‚òé', 'üìû', 'üìü', 'üì†', 'üì°', 'üì∫', 'üìª', 'üîä', 'üîâ', 'üîà', 'üîá', 'üîî', 'üîï', 'üì¢', 'üì£', '‚è≥', '‚åõ', '‚è∞', '‚åö', 'üîì', 'üîí', 'üîè', 'üîê', 'üîë', 'üîé', 'üí°', 'üî¶', 'üîÜ', 'üîÖ', 'üîå', 'üîã', 'üîç', 'üõÅ', 'üõÄ', 'üöø', 'üöΩ', 'üîß', 'üî©', 'üî®', 'üö™', 'üö¨', 'üí£', 'üî´', 'üî™', 'üíä', 'üíâ', 'üí∞', 'üí¥', 'üíµ', 'üí∑', 'üí∂', 'üí≥', 'üí∏', 'üì≤', 'üìß', 'üì•', 'üì§', '‚úâ', 'üì©', 'üì®', 'üìØ', 'üì´', 'üì™', 'üì¨', 'üì≠', 'üìÆ', 'üì¶', 'üìù', 'üìÑ', 'üìÉ', 'üìë', 'üìä', 'üìà', 'üìâ', 'üìú', 'üìã', 'üìÖ', 'üìÜ', 'üìá', 'üìÅ', 'üìÇ', '‚úÇ', 'üìå', 'üìé', '‚úí', '‚úè', 'üìè', 'üìê', 'üìï', 'üìó', 'üìò', 'üìô', 'üìì', 'üìî', 'üìí', 'üìö', 'üìñ', 'üîñ', 'üìõ', 'üî¨', 'üî≠', 'üì∞', 'üé®', 'üé¨', 'üé§', 'üéß', 'üéº', 'üéµ', 'üé∂', 'üéπ', 'üéª', 'üé∫', 'üé∑', 'üé∏', 'üëæ', 'üéÆ', 'üÉè', 'üé¥', 'üÄÑ', 'üé≤', 'üéØ', 'üèà', 'üèÄ', '‚öΩ', '‚öæ', 'üéæ', 'üé±', 'üèâ', 'üé≥', '‚õ≥', 'üöµ', 'üö¥', 'üèÅ', 'üèá', 'üèÜ', 'üéø', 'üèÇ', 'üèä', 'üèÑ', 'üé£', '‚òï', 'üçµ', 'üç∂', 'üçº', 'üç∫', 'üçª', 'üç∏', 'üçπ', 'üç∑', 'üç¥', 'üçï', 'üçî', 'üçü', 'üçó', 'üçñ', 'üçù', 'üçõ', 'üç§', 'üç±', 'üç£', 'üç•', 'üçô', 'üçò', 'üçö', 'üçú', 'üç≤', 'üç¢', 'üç°', 'üç≥', 'üçû', 'üç©', 'üçÆ', 'üç¶', 'üç®', 'üçß', 'üéÇ', 'üç∞', 'üç™', 'üç´', 'üç¨', 'üç≠', 'üçØ', 'üçé', 'üçè', 'üçä', 'üçã', 'üçí', 'üçá', 'üçâ', 'üçì', 'üçë', 'üçà', 'üçå', 'üçê', 'üçç', 'üç†', 'üçÜ', 'üçÖ', 'üåΩ', 'üè†', 'üè°', 'üè´', 'üè¢', 'üè£', 'üè•', 'üè¶', 'üè™', 'üè©', 'üè®', 'üíí', '‚õ™', 'üè¨', 'üè§', 'üåá', 'üåÜ', 'üèØ', 'üè∞', '‚õ∫', 'üè≠', 'üóº', 'üóæ', 'üóª', 'üåÑ', 'üåÖ', 'üåÉ', 'üóΩ', 'üåâ', 'üé†', 'üé°', '‚õ≤', 'üé¢', 'üö¢', '‚õµ', 'üö§', 'üö£', '‚öì', 'üöÄ', '‚úà', 'üí∫', 'üöÅ', 'üöÇ', 'üöä', 'üöâ', 'üöû', 'üöÜ', 'üöÑ', 'üöÖ', 'üöà', 'üöá', 'üöù', 'üöã', 'üöÉ', 'üöé', 'üöå', 'üöç', 'üöô', 'üöò', 'üöó', 'üöï', 'üöñ', 'üöõ', 'üöö', 'üö®', 'üöì', 'üöî', 'üöí', 'üöë', 'üöê', 'üö≤', 'üö°', 'üöü', 'üö†', 'üöú', 'üíà', 'üöè', 'üé´', 'üö¶', 'üö•', '‚ö†', 'üöß', 'üî∞', '‚õΩ', 'üèÆ', 'üé∞', '‚ô®', 'üóø', 'üé™', 'üé≠', 'üìç', 'üö©', '‚¨Ü', '‚¨á', '‚¨Ö', '‚û°', 'üî†', 'üî°', 'üî§', '‚Üó', '‚Üñ', '‚Üò', '‚Üô', '‚Üî', '‚Üï', 'üîÑ', '‚óÄ', '‚ñ∂', 'üîº', 'üîΩ', '‚Ü©', '‚Ü™', '‚Ñπ', '‚è™', '‚è©', '‚è´', '‚è¨', '‚§µ', '‚§¥', 'üÜó', 'üîÄ', 'üîÅ', 'üîÇ', 'üÜï', 'üÜô', 'üÜí', 'üÜì', 'üÜñ', 'üì∂', 'üé¶', 'üàÅ', 'üàØ', 'üà≥', 'üàµ', 'üà¥', 'üà≤', 'üâê', 'üàπ', 'üà∫', 'üà∂', 'üàö', 'üöª', 'üöπ', 'üö∫', 'üöº', 'üöæ', 'üö∞', 'üöÆ', 'üÖø', '‚ôø', 'üö≠', 'üà∑', 'üà∏', 'üàÇ', '‚ìÇ', 'üõÇ', 'üõÑ', 'üõÖ', 'üõÉ', 'üâë', '„äô', '„äó', 'üÜë', 'üÜò', 'üÜî', 'üö´', 'üîû', 'üìµ', 'üöØ', 'üö±', 'üö≥', 'üö∑', 'üö∏', '‚õî', '‚ú≥', '‚ùá', '‚ùé', '‚úÖ', '‚ú¥', 'üíü', 'üÜö', 'üì≥', 'üì¥', 'üÖ∞', 'üÖ±', 'üÜé', 'üÖæ', 'üí†', '‚ûø', '‚ôª', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê', '‚ôë', '‚ôí', '‚ôì', '‚õé', 'üîØ', 'üèß', 'üíπ', 'üí≤', 'üí±', '¬©', '¬Æ', '‚Ñ¢', '„ÄΩ', '„Ä∞', 'üîù', 'üîö', 'üîô', 'üîõ', 'üîú', '‚ùå', '‚≠ï', '‚ùó', '‚ùì', '‚ùï', '‚ùî', 'üîÉ', 'üïõ', 'üïß', 'üïê', 'üïú', 'üïë', 'üïù', 'üïí', 'üïû', 'üïì', 'üïü', 'üïî', 'üï†', 'üïï', 'üïñ', 'üïó', 'üïò', 'üïô', 'üïö', 'üï°', 'üï¢', 'üï£', 'üï§', 'üï•', 'üï¶', '‚úñ', '‚ûï', '‚ûñ', '‚ûó', '‚ô†', '‚ô•', '‚ô£', '‚ô¶', 'üíÆ', 'üíØ', '‚úî', '‚òë', 'üîò', 'üîó', '‚û∞', 'üî±', 'üî≤', 'üî≥', '‚óº', '‚óª', '‚óæ', '‚óΩ', '‚ñ™', '‚ñ´', 'üî∫', '‚¨ú', '‚¨õ', '‚ö´', '‚ö™', 'üî¥', 'üîµ', 'üîª', 'üî∂', 'üî∑', 'üî∏', 'üîπ'
];
const auditLog = require("../../functions/auditLog")

module.exports = {
    name: 'room',
    description: "This make rooms for you and your friends!",
    async execute(message, args, client, Discord) {

        if (!message.mentions.users.first()) return message.reply('Mention atleast one other person to make a room!')
        if (message.mentions.users.size > 10) return message.channel.send('Sorry, but you can only make a romm for up to 10 people!');
        const emoji = `${emojis[Math.floor(Math.random() * emojis.length)]}${emojis[Math.floor(Math.random() * emojis.length)]}`;
        const { guild } = message;
        const house = guild.channels.cache.get('879016741903167568')
        const menu = new MessageActionRow()
            .addComponents(
                new MessageButton()
                    .setLabel('Private')
                    .setStyle('SUCCESS')
                    .setCustomId('private_room'),

                new MessageButton()
                    .setLabel('Public')
                    .setStyle('SUCCESS')
                    .setCustomId('public_room'),

                new MessageButton()
                    .setLabel('Cancel')
                    .setStyle('DANGER')
                    .setCustomId('cancel')
            )

        const menuEmbed = new Discord.MessageEmbed()
            .setTitle('Room Creatorüè†üõ†')
            .setDescription('What type of room do you want to create?')
            .setColor('#2F3136')

        message.channel.send({ embeds: [menuEmbed], components: [menu] }).then((msg) => {

            const filter = (interaction) => {
                interaction.deferUpdate();
                if (interaction.user.id === message.author.id) return true;
                return;
            }
            const menucollector = message.channel.createMessageComponentCollector({ filter, max: 1 })
            menucollector.on('end', (ButtonInteraction) => {

                if (ButtonInteraction.first().customId === 'public_room') {
                    msg.edit({ content: `<@${message.author.id}>`, embeds: [roomcreated], components: [editedmenu] })
                }
                if (ButtonInteraction.first().customId === 'private_room') {
                        const roomcreated = new Discord.MessageEmbed()
                        .setTitle('Public Room created!üè†')
                        .setDescription('Instructions on how to add members goes here.')
                        .setColor('#2F3136');

                    const editedmenu = new MessageActionRow()
                        .addComponents(
                            new MessageButton()
                                .setLabel('Private')
                                .setStyle('SECONDARY')
                                .setCustomId('private_room')
                                .setDisabled(true),

                            new MessageButton()
                                .setLabel('Public')
                                .setStyle('SUCCESS')
                                .setCustomId('public_room')
                                .setDisabled(true),

                            new MessageButton()
                                .setLabel('Cancel')
                                .setStyle('DANGER')
                                .setCustomId('cancel')
                                .setDisabled(true),
                        )

                    const memberRole = guild.roles.cache.get('776321406497456148');

                    // Create a channel
                    const roomHead = message.author;
                    const roomID = Date.now();
                    guild.channels.create(`Public-${message.author.username}${emoji}`, {
                        parent: house,
                        type: 'text',
                        permissionOverwrites: [
                            {
                                id: memberRole,
                                deny: ['VIEW_CHANNEL'],
                            },
                        ],
                    }).then(room => {
                        auditLog.execute('üè†Room created!', `Created by ${message.author}\nRoom ID- \`${roomID}\``, client, Discord);
                        var timeout
                        function startTimer() {
                            timeout = setTimeout(() => {
                                auditLog.execute('üè†Room deleted!', `Inactive\nRoom ID- \`${roomID}\``, client, Discord);
                                room.delete();

                            }, 3600000);
                        }
                        const activityfilter = m => m.content.length >= 1;
                        const activityCollector = room.createMessageCollector(activityfilter);

                        activityCollector.on('collect', m => {
                            clearTimeout(timeout);
                            startTimer();
                        });
                        message.mentions.users.forEach(mention => {
                            // update the perms for all the mentined users.
                            const user = client.users.cache.get(mention.id);
                            room.permissionOverwrites.edit(user, {
                                VIEW_CHANNEL: true,
                            });
                        });
                        // map the mentioned users in a string to send in the embed
                        const mentionPeople = message.mentions.users.map((m) => {
                            return `${message.author}${m}`;
                        }).join(' ');
                        const embed = new Discord.MessageEmbed()
                            .setDescription(`Here is your room,\nRoom Head- ${message.author}\nRoom ID - \`${roomID}\``)
                            .setColor('#2F3136')
                            .setFooter(`${roomHead.tag} can delete the room by clicking on üõë`)
                        room.send({content:`${mentionPeople}`,
                            embeds: [embed]
                        }).then((msg) => {
                            msg.react('üõë');
                            const filter = (reaction, user) => {
                                return reaction.emoji.name === 'üõë' && user.id === message.author.id;
                            };

                            const collector = msg.createReactionCollector({filter});

                            collector.on('collect', (reaction, user) => {
                                msg.reactions.resolve('üõë').users.remove(user.id);
                                const confirmEmbed = new Discord.MessageEmbed()
                                    .setDescription('Are you sure?')
                                    .setColor('#2F3136');

                                room.send({content:`${roomHead}`,
                                    embeds: [confirmEmbed]
                                }).then((confirmMsg) => {
                                    confirmMsg.react('‚úÖ');
                                    confirmMsg.react('‚ùå');
                                    const confirmFilter = (confirmreaction, confirmuser) => {
                                        return (confirmreaction.emoji.name === '‚úÖ' || confirmreaction.emoji.name === '‚ùå') && confirmuser.id === message.author.id;
                                    };
                                    const confirmCollector = confirmMsg.createReactionCollector({confirmFilter});

                                    confirmCollector.on('collect', (confirmreaction, confirmuser) => {
                                        if (confirmreaction.emoji.name === '‚úÖ') {
                                            confirmMsg.reactions.removeAll()
                                            room.send({content:'> üëã**The room will de deleted in 5 seconds...**'});
                                            setTimeout(() => {
                                                clearTimeout(timeout);
                                                auditLog.execute('üè†Room deleted!', `Deleted by Head\nRoom ID- \`${roomID}\``, client, Discord);
                                                room.delete();
                                            }, 5000);
                                        }
                                        else {
                                            confirmMsg.reactions.resolve('‚ùå').users.remove(user.id);
                                            confirmMsg.delete();
                                        }
                                    });
                                });
                            });
                        });
                    });


                    msg.edit({ content: `<@${message.author.id}>`, embeds: [roomcreated], components: [editedmenu] })
                }
                if (ButtonInteraction.first().customId === 'cancel') {
                    const roomcreated = new Discord.MessageEmbed()
                        .setTitle('Room Created cancelledüö´')
                        .setDescription('The room creation was cancelled by the user.')
                        .setColor('#2F3136');

                    const editedmenu = new MessageActionRow()
                        .addComponents(
                            new MessageButton()
                                .setLabel('Private')
                                .setStyle('SUCCESS')
                                .setCustomId('private_room')
                                .setDisabled(true),

                            new MessageButton()
                                .setLabel('Public')
                                .setStyle('SUCCESS')
                                .setCustomId('public_room')
                                .setDisabled(true),

                            new MessageButton()
                                .setLabel('Cancel')
                                .setStyle('SECONDARY')
                                .setCustomId('cancel')
                                .setDisabled(true),
                        )

                    msg.edit({ content: `<@${message.author.id}>`, embeds: [roomcreated], components: [editedmenu] })
                    return;
                }
            })
        })
    }

}